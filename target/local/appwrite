#!/usr/bin/env bash
readonly ROOT="/home/andikod/sherpa/boxes/appwrite"
readonly SDD="$HOME/.sherpa" # Sherpa Dot-Dir
readonly SCD="$HOME/sherpa"  # Sherpa Custom-Dir
readonly EDITOR="vim"        # Default Editor
readonly BIN="${SDD}/bin"    # Default Editor
set -eo pipefail
use() {
local file="$1" # ex std/fmt
local dotdir="${SDD}/lib"
local custom="${SCD}/lib"
if [ -f "${custom}/${file}.sh" ]; then
source "${custom}/${file}.sh"
elif [ -f "${dotdir}/${file}.sh" ]; then
source "${dotdir}/${file}.sh"
fi
}
import() {
local url=""
local repo=""
local branch="master"
local file=""
while getopts "u:r:b:f:" opt; do
case $opt in
u) url=$OPTARG ;;
r) repo=$OPTARG ;;
b) branch=$OPTARG ;;
f) file=$OPTARG ;;
*) echo "Invalid flag" ;;
esac
done
if [[ $url != "" ]]; then
. <(curl -s "$url")
elif [[ $repo != "" ]]; then
local fullUrl="https://raw.githubusercontent.com/${repo}/refs/heads/${branch}/${file}"
. <(curl -s "$fullUrl")
else
echo "Opps. Something went wrong."
exit 1
fi
}
confirm() {
br
read -r -p "$1 (y/n): " answer
if [[ ! $answer =~ ^[Yy]$ ]]; then
br
p "${btnWarning} Canceled ${x} Ok, got it."
br
exit 1
fi
}
is_key() {
local key=$1
local file=$2
yq e "has(\"$key\")" "$file" | grep -q "true"
}
add_yaml_parent() {
local key="$1"
local file="$2"
yq eval ".$key = {}" -i "$file"
}
add_yaml_item() {
local key="$1"
local value="$2"
local file="$3"
yq eval ".$key = \"$value\"" -i "$file"
}
get_yaml_item() {
local key="$1"
local file="$2"
yq e ".$key" "$file"
}
update_yaml_item() {
local key="$1"
local newValue="$2"
local file="$3"
yq -i ".$key = \"$newValue\"" "$file"
}
remove_yaml_item() {
local key="$1"
local file="$2"
yq -i "del(.$key)" "$file"
}
print_yaml_items() {
local file="$1"
yq eval "." "$file"
}
package() {
local key="$1"
get_yaml_item "package.${key}" "${ROOT}/Sherpa.yaml"
}
env() {
local key="$1"
local env_file="${SCD}/env.yaml"
if [ -z "$key" ]; then
p "${btnWarning} MissingKey! ${x} Usage: ${em}env \"<key>\"${x}"
exit 1
fi
if [[ -n "$key" && ! $(is_key "$key" "${env_file}") ]]; then
p "${btnWarning} Oops! ${x} $key is not a valid key in ${env_file}"
exit 1
fi
get_yaml_item "${key}" "${env_file}"
}
dataGet() {
local file="$1"
local key="$2"
get_yaml_item "${key}" "${ROOT}/data/${file}.yaml"
}
dataAdd() {
local file="$1"
local key="$2"
local value="$3"
add_yaml_item "${key}" "${value}" "${ROOT}/data/${file}.yaml"
}
dataAddParent() {
local file="$1"
local key="$2"
get_yaml_parent "${key}" "${ROOT}/data/${file}.yaml"
}
dataUpdate() {
local file="$1"
local key="$2"
local value="$3"
add_yaml_item "${key}" "${value}" "${ROOT}/data/${file}.yaml"
}
dataDelete() {
local file="$1"
local key="$2"
remove_yaml_item "${key}" "${ROOT}/data/${file}.yaml"
}
strong="\033[1m"   # Make it Bold
disabled="\033[2m" # Make it Dimmed
em="\033[3m"       # Make it Italic
u="\033[4m"        # Make it Underlined
x="\033[0m" # Make it </end> but shorter
txtBlack="\033[30m"   # .text-red
txtRed="\033[31m"     # .text-red
txtGreen="\033[32m"   # .text-green
txtYellow="\033[33m"  # .text-yellow
txtBlue="\033[34m"    # .text-blue
txtMagenta="\033[35m" # .text-magenta
txtCyan="\033[36m"    # .text-cyan
txtWhite="\033[37m"   # .text-white
bgBlack="\033[40m"     # .bg-black
bgRed="\033[41m"       # .bg-red
bgGreen="\033[42m"     # .bg-green
bgYellow="\033[43m"    # .bg-yellow
bgBlue="\033[44m"      # .bg-blue
bgMagenta="\033[45m"   # .bg-magenta
bgCyan="\033[46m"      # .bg-cyan
bgLightGray="\033[37m" # .bg-lightGray
icoLeaf="\ue22f"
icoDocker="\uf21f"
is_color() {
local color="$1"
local valid_colors=("Black" "Red" "Green" "Yellow" "Blue" "Magenta" "Cyan" "White")
for valid_color in "${valid_colors[@]}"; do
if [ "$color" = "$valid_color" ]; then
return 0
fi
done
return 1
}
scdYaml="${SCD}/Sherpa.yaml"
customColor="$(get_yaml_item "primaryColor" "$scdYaml")"
if is_color "$mainColor"; then
primaryColor="$mainColor"
elif is_color "$customColor"; then
primaryColor="$customColor"
else
primaryColor="Green"
fi
case $primaryColor in
Black)
txtPrimary=${txtBlack}
;;
Red)
txtPrimary=${txtRed}
;;
Green)
txtPrimary=${txtGreen}
;;
Yellow)
txtPrimary=${txtYellow}
;;
Blue)
txtPrimary=${txtBlue}
;;
Magenta)
txtPrimary=${txtMagenta}
;;
Cyan)
txtPrimary=${txtCyan}
;;
White)
txtPrimary=${txtWhite}
;;
*)
txtPrimary=""
;;
esac
export btnSuccess="${bgGreen}${txtBlack}"
export btnWarning="${bgYellow}${txtBlack}"
export btnDanger="${bgRed}${txtWhite}"
export link="${u}${em}${txtBlue}"
text-center() {
local -i TERM_COLS
local -i str_len
local -i filler_len
local filler
TERM_COLS=$(tput cols)
str_len=${#1}
filler_len=$(((TERM_COLS - str_len) / 2))
filler=$(printf '%*s' "$filler_len" '' | tr ' ' ' ')
printf "%s%s\n" "$filler" "$1"
}
fetch() {
local endpoint="$1"
local response
response=$(curl -s -X GET "$endpoint")
echo "$response"
}
h1() {
printf "\n%b%b%s%b\n" "$strong" "$txtPrimary" "$1" "$x"
}
h2() {
printf "%b%s%b\n" "$txtPrimary" "$1" "$x"
}
h3() {
printf "%b%b%s%b\n" "$txtPrimary" "$em" "$1" "$x"
}
p() {
echo -e " $1"
}
span() {
printf "%s" "$1"
}
br() {
printf "\n"
}
em() {
printf "%b%s%b" "$em" "$1" "$x"
}
strong() {
printf "%b%s%b" "$strong" "$1" "$x"
}
hr() {
[[ $# == 0 ]] && return 1
declare -i TERM_COLS
declare -i str_len
TERM_COLS="$(tput cols)"
str_len="((${#1} + 2))"
[[ $str_len -ge $TERM_COLS ]] && {
echo "$1"
return 0
}
declare -i filler_len="$(((TERM_COLS - str_len) / 2))"
[[ $# -ge 2 ]] && ch="${2:0:1}" || ch=" "
filler=""
for ((i = 0; i < filler_len; i++)); do
filler="${filler}${ch}"
done
printf "%s %s %s" "$filler" "$1" "$filler"
[[ $(((TERM_COLS - str_len) % 2)) -ne 0 ]] && printf "%s" "${ch}"
printf "\n"
return 0
}
a() {
echo -e "${u}${em}${txtBlue}$1${x}"
}
flex-between() {
left_text=$1
right_text=$2
width=$(tput cols)
right_position=$((width - ${#right_text}))
printf "%s%*s\n" "$left_text" $((right_position - ${#left_text})) ""
printf "%s\n" "$right_text"
}
modify_value() {
local key="$1"
local new_value="$2"
local filename="$3"
sed -i -E "s/^(${key}\s*=\s*).*/\1${new_value}/" "$filename"
}
API_KEY="$(env "APPWRITE_KEY")"
API_URL="$(get_yaml_item "API_URL" "${ROOT}/data/appwrite.yaml")"
PROJECT_ID="$(get_yaml_item "PROJECT_ID" "${ROOT}/data/appwrite.yaml")"
DB_ID="$(get_yaml_item "DB_ID" "${ROOT}/data/appwrite.yaml")"
check_appwrite_api_key() {
local api_key="$1"
if [[ ! "$api_key" =~ ^standard_ ]]; then
echo "Invalid: Key must start with 'standard_'"
return 1
fi
local key_without_prefix="${api_key#standard_}"
if [[ ! "$key_without_prefix" =~ ^[a-f0-9]+$ ]]; then
echo "Invalid: Key must contain only lowercase hexadecimal characters (a-f, 0-9)"
return 1
fi
}
if [[ -z "$API_KEY" ]]; then
p "${btnWarning} Oops! ${x} APPWRITE_KEY variable is not set."
p "Place it in the '$SCD/env.yaml' file as 'APPWRITE_KEY: mykeyhere'."
exit 1
fi
check_appwrite_api_key "$API_KEY"
if [[ -z "$PROJECT_ID" ]]; then
p "${btnWarning} Oops! ${x} PROJECT_ID variable is not set."
p "It should be defined in the src/bin.sh file, that use this lib. "
exit 1
fi
make_request() {
local method=$1
local endpoint=$2
local data=$3
curl -s -X "$method" "$API_URL/$endpoint" \
-H "X-Appwrite-Project: ${PROJECT_ID}" \
-H "X-Appwrite-Key: ${API_KEY}" \
-H "Content-Type: application/json" \
-d "$data"
}
create_document() {
local collection_id="$1"
local document_data="$2"
make_request "POST" \
"databases/$DB_ID/collections/$collection_id/documents" "$document_data"
}
read_document() {
local collection_id="$1"
local document_id="$2"
response=$(make_request "GET" "databases/$DB_ID/collections/$collection_id/documents/$document_id" "")
echo "$response"
}
read_collection() {
local collection_id="$1"
make_request "GET" "databases/$DB_ID/collections/$collection_id/documents" "" | jq -c '.documents[]'
}
update_document() {
local collection_id="$1"
local document_id="$2"
local data="$3"
response=$(make_request "PATCH" "databases/$DB_ID/collections/$collection_id/documents/$document_id" "$data")
echo "Response: $response"
}
delete_document() {
local collection_id="$1"
local document_id="$2"
make_request "DELETE" "databases/$DB_ID/collections/$collection_id/documents/$document_id" ""
}
field() {
stack="$2"
needle="$1"
echo "$stack" | jq -r ".${needle}"
}
get_table_records() {
local collection_id="$1"
response=$(make_request "GET" "databases/$DB_ID/collections/$collection_id/documents" "")
echo "$response" | jq -c '.documents[]'
}
get_documents_as_array() {
local collection_id="$1"
local array_name="$2"
readarray -t "$array_name" < <(get_table_records "$collection_id")
}
usage() {
h1 " $(package "name")"
hr "BashBox" "-"
br
h2 "Usage"
p  "$(package "name") [option] <command> [argument]"
br
h2 "Options"
echo "  -h | --help       Display the usage message"
echo "  -v | --version    Display script Version."
br
h2 "Commands/Routes"
p  "* appwrite"
p  "* appwrite create <username>"
p  "* appwrite read"
p  "* appwrite update <username> <newUsername>"
p  "* appwrite delete <username>"
br
p  "Repo: ${link}$(package "repo")${x}"
br
}
while getopts ":hvVq-:" opt; do
case $opt in
h)
usage
exit 0
;;
v)
printf "%s v%s\n" "$(package "name")" "$(package "version")"
[[ -n "$(package "repo")" ]] && printf "Repo: %s\n" "$(package "repo")"
exit 0
;;
V)
verbose=1
exit 0
;;
q)
quiet=1
exit 0
;;
-)
case "${OPTARG}" in
help)
usage
exit 0
;;
version)
printf "%s v%s\n" "$(package "name")" "$(package "version")"
[[ -n "$(package "repo")" ]] && printf "Repo: %s\n" "$(package "repo")"
exit 0
;;
verbose)
verbose=1
exit 0
;;
quiet)
quiet=1
exit 0
;;
*)
echo "Unknown option --${OPTARG}" >&2
exit 1
;;
esac
;;
\?)
echo "Invalid option: -$OPTARG" >&2
exit 1
;;
:)
echo "Option -$OPTARG requires an argument." >&2
exit 1
;;
esac
done
shift $((OPTIND - 1))
use "std/fmt"
use "appwrite/crud"
main() {
h1 "Appwrite CRUD"
hr "Sh:erpa" "-"
h2 "Routes"
p  "* appwrite create <username>"
p  "* appwrite read"
p  "* appwrite update <username> <newUsername>"
p  "* appwrite delete <username>"
br
}
if [[ "$#" == 0 ]]; then
main
exit 0
fi
. "${ROOT}/src/routes/create.sh"
. "${ROOT}/src/routes/read.sh"
. "${ROOT}/src/routes/update.sh"
. "${ROOT}/src/routes/delete.sh"